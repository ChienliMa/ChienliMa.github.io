<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gsoc2015 | Pony's Stable]]></title>
  <link href="http://chienlima.github.io/blog/categories/gsoc2015/atom.xml" rel="self"/>
  <link href="http://chienlima.github.io/"/>
  <updated>2015-08-12T21:43:15+08:00</updated>
  <id>http://chienlima.github.io/</id>
  <author>
    <name><![CDATA[Chienli Ma]]></name>
    <email><![CDATA[maqianlie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self Criticism]]></title>
    <link href="http://chienlima.github.io/blog/2015/08/11/understand-c-linker/"/>
    <updated>2015-08-11T11:40:07+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/08/11/understand-c-linker</id>
    <content type="html"><![CDATA[<p>In the last week I wasted a lost of time for not turly understand others&#8217; codes. And I wanna make a self-criticism.</p>

<p>At the beginning of the tasks <code>OpFromGraph.c_code()</code>, Fred pointed to me a few commits which he thought might be and majorly implemented <code>make_thunk()</code> method. “This is wired, why he provided codes of other method?”, I thought. With only a glance of the codes and some confusions, I turned to <code>CLinker</code> and <code>gof.Op</code>.</p>

<p>I thought this might be a simple mission, which wasn&rsquo;t. The biggest problem was my misunderstand of <code>CLinker</code> &ndash; I thought it is something like <code>PerformLinker</code> and <code>VM_Likner</code>, called by <code>orig_func()</code> and linking the whole graph. But the truth is <code>CLinker</code> did not serve the fgraph, but the node. In <code>gof.Op.make_thunk()</code>, if <code>op_use_c_code</code> is true, it will call <code>make_c_thunk()</code> and use <code>CLinker</code> to generate a C code and link the storage. And then return a <code>ret</code>(what&rsquo;s a <code>ret</code>?)</p>

<p>So there&rsquo;s two equivalence ways to impelemnt <code>c_code()</code>, to make an <code>Op</code> faster. One is the way I took &ndash; implementing serious of C code method of <code>Op</code>, so that <code>Op</code> can return C code accords to fgraph. In this way I need to generate C code fitst. And then I need to break apart those code while ensuring they can be compiled after being resembled by <code>CLinker</code>. This require a thorough understand of <code>CLinker</code>. Yes I can only get the basic idea. Therefore I stucked.</p>

<p>The other way is override the <code>make_thunk()</code>(or <code>make_c_thunk</code>)method, which is Fred&rsquo;s way. This is much easier. Because we do not need to seperate the codes, it is generated in a whole and independently. We don&rsquo;t link the cthunk with storage until it&rsquo;s generated(really?), which save a lot of problem and make full use of <code>CLinker</code>&rsquo;s ability.</p>

<p>Fred already gave me a workable code. I only need to improve it a bit. But my ignorant lead me into another way.Therefoer I decide to post this blog to remind me that everytime before I take a step, I need to full understand what I&rsquo;m going to do and how I&rsquo;m going to accomlish it, as well as suggestion from others. Otherwise, the more effort I make, I more resoureces I waste. Also, ask question when confused.</p>

<p>Shame on me this time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpfromGraph.c_code]]></title>
    <link href="http://chienlima.github.io/blog/2015/08/03/opfromgraph-dot-c-code/"/>
    <updated>2015-08-03T11:04:09+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/08/03/opfromgraph-dot-c-code</id>
    <content type="html"><![CDATA[<p>In this two weeks <code>connection_pattern</code> and <code>infer_shape</code> were merged. I was supposted to implemented the GPU optimization feature. As I don&rsquo;t have a machine with Nvidia GPU, I truned to the <code>c_code</code> method after several days.</p>

<p>Reusing the code of <code>CLinker</code> would be our original idea. But thing wuold not be that simple. <code>CLinker</code> generate code at a function scale which mean it treat node <code>OpFromGraph</code> as a function. Yet we want to generate code at a OP scale. Therefore we need to remove some code in a larger scale to make <code>OpFromGraph.c_code()</code> return a &lsquo;node like&rsquo; c_code.</p>

<p>There&rsquo;re to solution. One is to add a new feature to <code>CLinker</code> so that it can detect <code>OpFromGraph</code> node and do some special behavior. The other one is to avoid high level method like <code>code_gen()</code> in <code>CLinker</code> &ndash; only use auxilary method to assemble a &lsquo;node like&rsquo; c_code. The later solution seems easier and I am working on it.  <code>CLinker</code> is a very complicated class, I try to understand it and work out a workable code in the next two weeks.</p>

<p>Wish myself good luck~~!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting Hand on OpFromGraph]]></title>
    <link href="http://chienlima.github.io/blog/2015/07/18/put-hand-on-opfromgraph/"/>
    <updated>2015-07-18T18:01:35+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/07/18/put-hand-on-opfromgraph</id>
    <content type="html"><![CDATA[<p>This two week, I start working on <code>OpFromGraph</code>. Which is the second part of the proposal.</p>

<p>Currently, if a FunctionGraph have repeated subgraph, theano will optimize these sub-graphs individually, which is not only a waste of computational resources but a waste of time. If we can extract a common structure in FunctionGraph and make it a <code>Op</code>, we can only optimize the sub-graph of this <code>Op</code> once and reuse it every where. This will speed up the optimization process. And <code>OpFromGraph</code> provides such feature.</p>

<p>To make <code>OpFromGraph</code> works well, it should support GPU and can be optimized. Following feature are expected:</p>

<ul>
<li><code>__eq__()</code> and <code>__hash__()</code></li>
<li><code>connection_pattern()</code> and &#8220;infer__shape()&#8220;`</li>
<li>Support GPU</li>
<li><code>c_code()</code></li>
</ul>


<p>I implement two feature in last two week: <code>connection_pattern</code> and <code>infer_shape</code>.  I hope I can make  <code>OpFromGraph</code> a useful feature at the end of this GSoC :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluation Passed and the Next Step: OpFromGraph]]></title>
    <link href="http://chienlima.github.io/blog/2015/07/04/newpost/"/>
    <updated>2015-07-04T23:51:57+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/07/04/newpost</id>
    <content type="html"><![CDATA[<p>Evaluation passed and the next step: OpFromGraph</p>

<p>The PR of <code>function.copy()</code> is ready to merged, only need fred to fix a small bug. And in this Friday I passed the mid-term evaluation. So it&rsquo;s time to take the next step.</p>

<p>In the original proposal ,the next step is to <code>swap output and updates</code>. After a discussion with Fred, we thought this feature is useless so we skip this and head to the next feature directly &ndash; <code>OpFromGraph</code>.</p>

<h2>Goal: </h2>

<p>make class <code>OpFromGraph</code> work.</p>

<h2>Big How?</h2>

<p> <code>OpFromGraph</code> should init a <code>gof.op</code> that has no difference with other <code>Op</code>s and can be optimized. Otherwise it has no sense.</p>

<p>For this, we need to make it work on GPU, make sure it works with C code and document it. Make sure <code>infer_shape()</code>, <code>grad()</code> work with it. Ideally, make <code>R_op()</code> work too.</p>

<h2>Detailed how.</h2>

<ul>
<li>Implement <code>__hash__()</code> and <code>__eq__()</code> method so it is a basic</li>
<li>Implement <code>infer_shape()</code> method so that it&rsquo;s optimizable</li>
<li>test if it work with shared variable as input and if not make it work. Add test for that.</li>
<li>Move it correctly to the GPU. We can do it quickly for the old back-end, move all float32 inputs to the GPU. Otherwise, we need to compile the inner function, see which inputs get moved to the GPU, then create a new OpFromGraph with the corresponding input to the GPU. <a href="https://github.com/Theano/Theano/pull/2982">#2982</a></li>
<li>Maker<code>grad()</code> work. This should remove the grad_depth parameter</li>
</ul>


<hr />

<h3>First Step: infer_shape:</h3>

<p>The main idea is to calculatet the shapes of outputs from given input shapes. This is a process similar to executing a function &ndash; we cannot know the shape of a variable before knowing the shape of the variables it depends on. So, we can mimic the <code>make_thunk()</code> method to calculate the shape from output to input. I come out with a draft now, and need some help with test case.</p>

<pre><code class="python">order = self.fn.maker.fgraph.toposort()

# A dict that map variable to its shape(list)
shape_map = {}

# set the input shape of the fgraph
for in_var, shape in izip(in_vars, shapes);
    shape_map.set_default(in_var, shape)

# calculate the output shape from input shape
for node in order:
    assert all([var in shape_map.keys() for var in node.inputs])

    # calculate output shape
    in_shapes = [ shape_map[var] for var in node.inputs]
    out_shapes = node.op.infer_shape(node, in_shapes)

    # store the shape of that variable
    for out_var, shape in izip(node.outputs, out_shapes):
        shape_map.set_default(out_var, list(shape))

# extract output shape
return [ tuple(shape_map[var]) for var in fgraph.outputs]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Second Two-week]]></title>
    <link href="http://chienlima.github.io/blog/2015/06/21/the-second-two-week/"/>
    <updated>2015-06-21T00:09:54+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/06/21/the-second-two-week</id>
    <content type="html"><![CDATA[<p>Almost forget to update a post.</p>

<p>In this two week, I finished the first feature &ldquo;Allow user to regenerate a function from compiled one&rdquo;, and this feature &ldquo;can be merged. But there&rsquo;s another PR need to rebase.&rdquo;  So, it&rsquo;s done.</p>

<p>Also, I get a draft of the code that allow user to swap SharedVariable. When I said &lsquo;draft&rsquo;, I mean that I&rsquo;ve finish the code as well as the testcase and they work. I&rsquo;ll make a PR for review at the beginning of next week. Also I have some new idea need to discuss with Fred.</p>

<p>I hope I can finish all 3 feature in the first 6-week: copy, swap_sharedvariable and delete_update. So that I can focus on OpFromGraph in the next half. It seems that someone has started working on it now. I hope he did not &lsquo;rob&rsquo; my job. :)</p>
]]></content>
  </entry>
  
</feed>
