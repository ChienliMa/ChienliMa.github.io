<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pony's Stable]]></title>
  <link href="http://chienlima.github.io/atom.xml" rel="self"/>
  <link href="http://chienlima.github.io/"/>
  <updated>2015-08-03T11:20:40+08:00</updated>
  <id>http://chienlima.github.io/</id>
  <author>
    <name><![CDATA[Chienli Ma]]></name>
    <email><![CDATA[maqianlie@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpfromGraph.c_code]]></title>
    <link href="http://chienlima.github.io/blog/2015/08/03/opfromgraph-dot-c-code/"/>
    <updated>2015-08-03T11:04:09+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/08/03/opfromgraph-dot-c-code</id>
    <content type="html"><![CDATA[<p>In this two weeks <code>connection_pattern</code> and <code>infer_shape</code> were merged. I was supposted to implemented the GPU optimization feature. As I don&rsquo;t have a machine with Nvidia GPU, I truned to the <code>c_code</code> method after several days.</p>

<p>Reusing the code of <code>CLinker</code> would be our original idea. But thing wuold not be that simple. <code>CLinker</code> generate code at a function scale which mean it treat node <code>OpFromGraph</code> as a function. Yet we want to generate code at a OP scale. Therefore we need to remove some code in a larger scale to make <code>OpFromGraph.c_code()</code> return a &lsquo;node like&rsquo; c_code.</p>

<p>There&rsquo;re to solution. One is to add a new feature to <code>CLinker</code> so that it can detect <code>OpFromGraph</code> node and do some special behavior. The other one is to avoid high level method like <code>code_gen()</code> in <code>CLinker</code> &ndash; only use auxilary method to assemble a &lsquo;node like&rsquo; c_code. The later solution seems easier and I am working on it.  <code>CLinker</code> is a very complicated class, I try to understand it and work out a workable code in the next two weeks.</p>

<p>Wish myself good luck~~!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Putting Hand on OpFromGraph]]></title>
    <link href="http://chienlima.github.io/blog/2015/07/18/put-hand-on-opfromgraph/"/>
    <updated>2015-07-18T18:01:35+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/07/18/put-hand-on-opfromgraph</id>
    <content type="html"><![CDATA[<p>This two week, I start working on <code>OpFromGraph</code>. Which is the second part of the proposal.</p>

<p>Currently, if a FunctionGraph have repeated subgraph, theano will optimize these sub-graphs individually, which is not only a waste of computational resources but a waste of time. If we can extract a common structure in FunctionGraph and make it a <code>Op</code>, we can only optimize the sub-graph of this <code>Op</code> once and reuse it every where. This will speed up the optimization process. And <code>OpFromGraph</code> provides such feature.</p>

<p>To make <code>OpFromGraph</code> works well, it should support GPU and can be optimized. Following feature are expected:</p>

<ul>
<li><code>__eq__()</code> and <code>__hash__()</code></li>
<li><code>connection_pattern()</code> and &#8220;infer__shape()&#8220;`</li>
<li>Support GPU</li>
<li><code>c_code()</code></li>
</ul>


<p>I implement two feature in last two week: <code>connection_pattern</code> and <code>infer_shape</code>.  I hope I can make  <code>OpFromGraph</code> a useful feature at the end of this GSoC :).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluation Passed and the Next Step: OpFromGraph]]></title>
    <link href="http://chienlima.github.io/blog/2015/07/04/newpost/"/>
    <updated>2015-07-04T23:51:57+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/07/04/newpost</id>
    <content type="html"><![CDATA[<p>Evaluation passed and the next step: OpFromGraph</p>

<p>The PR of <code>function.copy()</code> is ready to merged, only need fred to fix a small bug. And in this Friday I passed the mid-term evaluation. So it&rsquo;s time to take the next step.</p>

<p>In the original proposal ,the next step is to <code>swap output and updates</code>. After a discussion with Fred, we thought this feature is useless so we skip this and head to the next feature directly &ndash; <code>OpFromGraph</code>.</p>

<h2>Goal: </h2>

<p>make class <code>OpFromGraph</code> work.</p>

<h2>Big How?</h2>

<p> <code>OpFromGraph</code> should init a <code>gof.op</code> that has no difference with other <code>Op</code>s and can be optimized. Otherwise it has no sense.</p>

<p>For this, we need to make it work on GPU, make sure it works with C code and document it. Make sure <code>infer_shape()</code>, <code>grad()</code> work with it. Ideally, make <code>R_op()</code> work too.</p>

<h2>Detailed how.</h2>

<ul>
<li>Implement <code>__hash__()</code> and <code>__eq__()</code> method so it is a basic</li>
<li>Implement <code>infer_shape()</code> method so that it&rsquo;s optimizable</li>
<li>test if it work with shared variable as input and if not make it work. Add test for that.</li>
<li>Move it correctly to the GPU. We can do it quickly for the old back-end, move all float32 inputs to the GPU. Otherwise, we need to compile the inner function, see which inputs get moved to the GPU, then create a new OpFromGraph with the corresponding input to the GPU. <a href="https://github.com/Theano/Theano/pull/2982">#2982</a></li>
<li>Maker<code>grad()</code> work. This should remove the grad_depth parameter</li>
</ul>


<hr />

<h3>First Step: infer_shape:</h3>

<p>The main idea is to calculatet the shapes of outputs from given input shapes. This is a process similar to executing a function &ndash; we cannot know the shape of a variable before knowing the shape of the variables it depends on. So, we can mimic the <code>make_thunk()</code> method to calculate the shape from output to input. I come out with a draft now, and need some help with test case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">order</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">fn</span><span class="o">.</span><span class="n">maker</span><span class="o">.</span><span class="n">fgraph</span><span class="o">.</span><span class="n">toposort</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># A dict that map variable to its shape(list)</span>
</span><span class='line'><span class="n">shape_map</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set the input shape of the fgraph</span>
</span><span class='line'><span class="k">for</span> <span class="n">in_var</span><span class="p">,</span> <span class="n">shape</span> <span class="ow">in</span> <span class="n">izip</span><span class="p">(</span><span class="n">in_vars</span><span class="p">,</span> <span class="n">shapes</span><span class="p">);</span>
</span><span class='line'>    <span class="n">shape_map</span><span class="o">.</span><span class="n">set_default</span><span class="p">(</span><span class="n">in_var</span><span class="p">,</span> <span class="n">shape</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># calculate the output shape from input shape</span>
</span><span class='line'><span class="k">for</span> <span class="n">node</span> <span class="ow">in</span> <span class="n">order</span><span class="p">:</span>
</span><span class='line'>    <span class="k">assert</span> <span class="nb">all</span><span class="p">([</span><span class="n">var</span> <span class="ow">in</span> <span class="n">shape_map</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">inputs</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># calculate output shape</span>
</span><span class='line'>    <span class="n">in_shapes</span> <span class="o">=</span> <span class="p">[</span> <span class="n">shape_map</span><span class="p">[</span><span class="n">var</span><span class="p">]</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">node</span><span class="o">.</span><span class="n">inputs</span><span class="p">]</span>
</span><span class='line'>    <span class="n">out_shapes</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="n">op</span><span class="o">.</span><span class="n">infer_shape</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">in_shapes</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># store the shape of that variable</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">out_var</span><span class="p">,</span> <span class="n">shape</span> <span class="ow">in</span> <span class="n">izip</span><span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">outputs</span><span class="p">,</span> <span class="n">out_shapes</span><span class="p">):</span>
</span><span class='line'>        <span class="n">shape_map</span><span class="o">.</span><span class="n">set_default</span><span class="p">(</span><span class="n">out_var</span><span class="p">,</span> <span class="nb">list</span><span class="p">(</span><span class="n">shape</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># extract output shape</span>
</span><span class='line'><span class="k">return</span> <span class="p">[</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">shape_map</span><span class="p">[</span><span class="n">var</span><span class="p">])</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">fgraph</span><span class="o">.</span><span class="n">outputs</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Second Two-week]]></title>
    <link href="http://chienlima.github.io/blog/2015/06/21/the-second-two-week/"/>
    <updated>2015-06-21T00:09:54+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/06/21/the-second-two-week</id>
    <content type="html"><![CDATA[<p>Almost forget to update a post.</p>

<p>In this two week, I finished the first feature &ldquo;Allow user to regenerate a function from compiled one&rdquo;, and this feature &ldquo;can be merged. But there&rsquo;s another PR need to rebase.&rdquo;  So, it&rsquo;s done.</p>

<p>Also, I get a draft of the code that allow user to swap SharedVariable. When I said &lsquo;draft&rsquo;, I mean that I&rsquo;ve finish the code as well as the testcase and they work. I&rsquo;ll make a PR for review at the beginning of next week. Also I have some new idea need to discuss with Fred.</p>

<p>I hope I can finish all 3 feature in the first 6-week: copy, swap_sharedvariable and delete_update. So that I can focus on OpFromGraph in the next half. It seems that someone has started working on it now. I hope he did not &lsquo;rob&rsquo; my job. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second_look_into_Theano_core]]></title>
    <link href="http://chienlima.github.io/blog/2015/05/17/second-look-into-theano-core/"/>
    <updated>2015-05-17T19:26:55+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/05/17/second-look-into-theano-core</id>
    <content type="html"><![CDATA[<p>The first feature was done and is being reviewed! This post is my reading notes of theano core this week and how I implements the share_memory feature.</p>

<h2>Data sturctures</h2>

<h3>Function</h3>

<pre><code>Function is a callable object whose core is a function ```fn``` generate by linker. Every time a function is call, it will first examinate input data and then evaluate the ```fn``` to get output value.
</code></pre>

<p>PARAMETERS:</p>

<ul>
<li><strong>input/output_storages:</strong> two list of Container instance.</li>
<li><strong>maker:</strong> the maker of this function</li>
<li><strong>finder/inv_finder:</strong> provide mapping between <code>Container</code> and <code>In</code>( seems useless )</li>
<li><strong>fn:</strong> Core, what the real &lsquo;function&rsquo; is, a python function that evaluate graph.</li>
<li><strong>default and indices:</strong> List of tuples, partially useful. <code>default[i][2]</code> is <code>input_storage[i]</code> ;  <code>indices[i][0]</code> is <code>inputs[i]</code> in FunctionMaker.</li>
</ul>


<p>METHODS:</p>

<ul>
<li><code>__init__()</code>: Initialize input containers value and set up &ldquo;[]&rdquo; operator of container and self</li>
<li><code>__call__()</code>: verify input data types and then execute the <code>self.fn</code>. Pickup value in some of the the output storages and set up corresponding input_storage in there&rsquo;s updates.</li>
</ul>


<hr />

<h3>FunctionMaker</h3>

<pre><code>FunctionMaker is a Factory that create function. However, it's not like a factory very much cause every maker only corrsponds to one function. In FunctionMaker some important info of a theano.function are stored, such as Inputs/Outputs(represented by SymbolicKit), FunctionGraph.
</code></pre>

<p>PARAMS:</p>

<ul>
<li><strong>indices:</strong> ( almost deprecated, ignore )</li>
<li><strong>inputs:</strong> List of In() instances. In()</li>
<li><strong>output:</strong> List of Out() instances</li>
<li><strong>expanded_inputs:</strong> equals to inputs plus sharedvariables</li>
<li><strong>fgraph:</strong> FunctionGraph that represents the function it creates.</li>
<li><strong>Linker:</strong> Linker that link storage and apply method to create a <code>fn</code>. By default, <code>FAST_RUN</code> mode use <code>VM_Linker</code> , <code>FAST_COMPILE</code> uses <code>PerformLinker</code>.</li>
<li><strong>Optimizer, mode, profile &hellip;</strong>: some configuration that has less to do with my job</li>
</ul>


<p>METHOD:</p>

<ul>
<li><strong>create(input_storages):</strong> Given input_storages(by default, list of In.value), start the linker and link the function using <code>Linker.make_thunk()</code> return a theano.function.</li>
</ul>


<hr />

<h3>Linker/VM</h3>

<pre><code>Linker is a class that allocate storage for allpy_nodes and link them together. Understanding Linker and FunctionGraph definitely helps understands how theano works. The core method of Linker is make_thunk(). 
</code></pre>

<p>PARAMS:</p>

<ul>
<li><strong>fgraph</strong>: <code>FunctionGraph</code> accpeted by <code>Linker.accept()</code>.</li>
<li><strong>allow_gc,recycle&hellip;</strong>: some configuration bools</li>
</ul>


<p>METHODS:</p>

<ul>
<li><strong>make_thunk/all&hellip; :</strong>  <code>make_thunk()</code> is defined in class <code>Linker</code>. It calls method <code>make_all()</code>. Every subclass of linker will have slightly different implementation of <code>make_all()</code>. Bascially, at first, <code>make_all()</code> will toposort a fgraph, to acquire the <code>order</code> that apply_nodes should be executed. Next, it will call <code>Op.make_thunk()</code>, whick return a function. This function take input_storage of node, apply computation on them, and put result on output storage. Meanwhile, <code>make_all()</code> will allocate storage for all variables . Same variables in different node will have same storages. This is done by a dict <code>sotarge_map</code> that map variable to storage. At last, Linker return a function that executes list of thunks in certain order to acquire function outputs data.</li>
</ul>


<h3>Storage</h3>

<pre><code>Storage is quite a tricky thing in theano. Theano use a list with one element to be a storage. The element is true data. But all object only refer to the list. 
The list works like a pointer. When some objects refer to a storage, they refers to the list, not the true data. Therefore, modifying the data of storage will not change this reference. By doing this, theano can access and modify storage data from several places without change the reference relationship.
</code></pre>

<hr />

<h3>FunctionGraph</h3>

<pre><code>A representation of the computational graph of a function. It stores given the input and output variables of one function, by calling node.input and variable.owner recursively we can get the whole graph 
</code></pre>

<p>PARAMS:</p>

<ul>
<li><strong>features:</strong> Still Don&rsquo;t understand now, ignore it.</li>
<li><strong>input/output:</strong> List of input/output variabls.</li>
<li><strong>variables:</strong> Set of variables( all variables in the subgraph)</li>
<li><strong>apply_nodes:</strong> Set of apply_nodes in the subgraph defined by inputs and outputs</li>
</ul>


<p>METHODS</p>

<ul>
<li><code>__import_r__</code> and <code>__import__()</code>: import variable and apply_node to this fgraph.</li>
<li><code>clone_get_equiv</code> : Clone fgraph. Return new fgraph and a dict that map old variables to new variables.</li>
<li><code>replace()</code> : Replace all certain variables in fgraph by given new variables.</li>
</ul>


<hr />

<h2>How theano work?( Simplified version )</h2>

<h3>Without update:</h3>

<p>1.Input Variables will be wraped and become <code>In()</code>s. Each <code>In()</code> contains variable, it&rsquo;s value( defaults is none ) as well as some other configuration.
2.Generate fgraph by input and output variables, and then optimize it.
3.Linker toposorts fgraph to get an <code>order</code> of apply_nodes.Next, Linker allocates storages and links function based on this <code>order</code>.
4.Done</p>

<h3>With update:</h3>

<p>Update is given by a dict <code>{ ori_var:update_var ... }</code>. <code>Ori_var</code> is limited to be an SharedVariable therefore it will transfer into <code>In()</code> and become the input of this function. <code>update_var</code> will be add into the output of fgraph. Everytime a function called, the function  extract the storage of <code>update_var</code> and use it to set the value of corresponding input.</p>

<hr />

<h2>How to implement the share_memory feature?</h2>

<p>This is simple after understand how theano works. I implements it following sevaral steps:
1. Copy <code>In()</code> and <code>Out()</code> instances in Maker
2. Copy fgraph and get the dict <code>equiv</code> that map old variables to new variables
3. Copy old storage_map in <code>Function.fn.storage_map</code>
4. Modify copied storage_map accord to equiv, so that in the copied storage_map, new variables are mapped to old storage if memory need to be shared.
5. Reinitialize the maker, linke the function using the copied storage_map
6. Done</p>

<hr />

<p>Ok, basically this is the report of this week&rsquo;s work. Now I need to figure out how to implement the following features.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Gift From Google]]></title>
    <link href="http://chienlima.github.io/blog/2015/05/16/first-gift-from-google/"/>
    <updated>2015-05-16T16:12:52+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/05/16/first-gift-from-google</id>
    <content type="html"><![CDATA[<p>Several days a ago, I reveived a Fedex package. When I opened it &hellip; Bomb!</p>

<h4>Payoneer pre-paid MasterCard with Google icon on it!</h4>

<p><img src="http://chienlima.github.io/images/GSoCMasterCard.jpg" width="512" height="512" title="image" alt="images"></p>

<p>Good looking card. I guass someone will regret for using existing bank account.
Also this is my first own credit card. Finally I can make payment without a phone from my dad :)</p>

<p>Google is ready to pay me now. &ldquo;Are you OK?&rdquo;( Leijun&rsquo;s &lsquo;Chinglish&rsquo; )</p>

<hr />

<p>Kinda occupied in the last week. Luckily, I finished those buinesses. And now I am back again.
The first feature I will add to theano is a function that allow user to make a copy of function and allow functions run multi-theadedly. There exist two similar features: <code>pickle()</code> and <code>copy()</code> of a function. To figure how I need to work. I need to take 3 steps as preparation:</p>

<ul>
<li>Look into the code and see how function is generated <code>Done</code></li>
<li>Look into the code and understand <code>Function</code>, <code>FunctionMaker</code>, <code>Linker</code> and <code>FunctionGraph</code>. <code>next</code></li>
<li>Have a look at <code>pickle</code> and <code>copy()</code>, use them, figure out how them work and the differneces. Then think about my own idea.</li>
</ul>


<p>Ok, now I need to go and take the step two now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Look Into Theano Core]]></title>
    <link href="http://chienlima.github.io/blog/2015/05/07/first-look-into-theano-core/"/>
    <updated>2015-05-07T11:08:32+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/05/07/first-look-into-theano-core</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a week and a half since google-melange anounced the accepted student for google summer of code. I was luckcy enough to be accepted by Theano &ndash; sub-foundation of Python organization, to help them add new features: Allow user to modify compiled function. As scheduled, from 27th April to 23rd May is the community bounding period. During these days I ought to get familiar with Theano core code and Theano dev community.</p>

<p>Before the application started, I&rsquo;ve dived into Theano cored and got the basic idea of what I&#8217;am going to do. However, to make the idea more clear and to fit the requirement that student should post every week about their progress. I decide to write two post about Theano core &ndash; about how theano work. This is the first post. This post will talk about what is a function? And how a function is generate.</p>

<h2>How a function is generated?</h2>

<p> Just recall how we compiled a function <code>func = theano.function( [ inputs ], output )</code>, we can know that we should start out journey from method  <code>function()</code>, which locates in  <code>theano/compile/founction.py</code>.<br/>
 In method <code>function()</code>, after some data verification, it will call <code>orig_func()</code> or <code>pfunc()</code> which return a <code>function</code> that user will get. Since <code>pfunc()</code> will also call <code>orig_func()</code>, we are going to look into <code>pfunc()</code> first.</p>

<h3>pfunc.py</h3>

<p> <code>pfunc()</code> have two major tasks:</p>

<ul>
<li>Transfer input_variable into <code>In()</code> instances. So does <code>shared_variable</code>. ( In function graph,  SharedVariabls are treated as input, updates are treated as output ).</li>
<li>Rebuild computational graph using <code>updates</code> and <code>inputs</code>, transform output into <code>Out</code>  instances.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">pfunc</span><span class="p">(</span> <span class="o">...</span> <span class="n">some</span> <span class="n">arguments</span> <span class="o">...</span> <span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Clones the replacements named in the givens argument, and points each Var1 to</span>
</span><span class='line'>    <span class="c"># the clone of Var2.</span>
</span><span class='line'>    <span class="c"># Transform params into theano.compile.In objects.</span>
</span><span class='line'>    <span class="n">inputs</span> <span class="o">=</span> <span class="p">[</span><span class="n">_pfunc_param_to_in</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">allow_downcast</span><span class="o">=</span><span class="n">allow_input_downcast</span><span class="p">)</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#  clones the outputs and the update expressions.  This rebuilds a computation graph</span>
</span><span class='line'>    <span class="c"># from the inputs and the givens. ( Irrelative to me. Pass )</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output_vars</span> <span class="o">=</span> <span class="n">rebuild_collect_shared</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">in_variables</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">replace</span><span class="o">=</span><span class="n">givens</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">updates</span><span class="o">=</span><span class="n">updates</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">rebuild_strict</span><span class="o">=</span><span class="n">rebuild_strict</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">copy_inputs_over</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                                             <span class="n">no_default_updates</span><span class="o">=</span><span class="n">no_default_updates</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># extracting the arguments</span>
</span><span class='line'>    <span class="n">input_variables</span><span class="p">,</span> <span class="n">cloned_outputs</span><span class="p">,</span> <span class="n">other_stuff</span> <span class="o">=</span> <span class="n">output_vars</span>
</span><span class='line'>    <span class="n">clone_d</span><span class="p">,</span> <span class="n">update_d</span><span class="p">,</span> <span class="n">update_expr</span><span class="p">,</span> <span class="n">shared_inputs</span> <span class="o">=</span> <span class="n">other_stuff</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">iv</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">input_variables</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i</span><span class="o">.</span><span class="n">variable</span> <span class="o">=</span> <span class="n">iv</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">sv</span> <span class="ow">in</span> <span class="n">shared_inputs</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># pass value of None here</span>
</span><span class='line'>        <span class="c"># value will be stored in the resulting functions&#39; defaults list</span>
</span><span class='line'>        <span class="c"># but since the value of shared variables never needs to be refed, it is not needed</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sv</span> <span class="ow">in</span> <span class="n">update_d</span><span class="p">:</span>
</span><span class='line'>            <span class="n">si</span> <span class="o">=</span> <span class="n">In</span><span class="p">(</span><span class="n">variable</span><span class="o">=</span><span class="n">sv</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">sv</span><span class="o">.</span><span class="n">container</span><span class="p">,</span> <span class="n">mutable</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">borrow</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">update</span><span class="o">=</span><span class="n">update_d</span><span class="p">[</span><span class="n">sv</span><span class="p">],</span> <span class="n">shared</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">si</span> <span class="o">=</span> <span class="n">In</span><span class="p">(</span><span class="n">variable</span><span class="o">=</span><span class="n">sv</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="n">sv</span><span class="o">.</span><span class="n">container</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">mutable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">borrow</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">shared</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">si</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">orig_function</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">cloned_outputs</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span>
</span><span class='line'>            <span class="n">accept_inplace</span><span class="o">=</span><span class="n">accept_inplace</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span>
</span><span class='line'>            <span class="n">on_unused_input</span><span class="o">=</span><span class="n">on_unused_input</span><span class="p">,</span> <span class="n">output_keys</span><span class="o">=</span><span class="n">output_keys</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>orig_func():</h3>

<p>Now it time for a look into <code>orig_func()</code>.  <code>orig_func()</code> will again makes sure that inputs and outputs are transformed into <code>In</code> an <code>Out</code>. And then it will use <code>create</code> method in <code>FunctionMaker</code> to make a function, which will be return.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">orig_function</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">accept_inplace</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">on_unused_input</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">output_keys</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># conver input variable into instances of In() instances</span>
</span><span class='line'>    <span class="n">inputs</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">convert_function_input</span><span class="p">,</span> <span class="n">inputs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># so do outputs</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">outputs</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
</span><span class='line'>            <span class="n">outputs</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">FunctionMaker</span><span class="o">.</span><span class="n">wrap_out</span><span class="p">,</span> <span class="n">outputs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">outputs</span> <span class="o">=</span> <span class="n">FunctionMaker</span><span class="o">.</span><span class="n">wrap_out</span><span class="p">(</span><span class="n">outputs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># In()s and Out()s will be passed into FunctionMaker and a function will be create from it by calling create() method.</span>
</span><span class='line'>    <span class="n">fn</span> <span class="o">=</span> <span class="n">Maker</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">outputs</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">mode</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">accept_inplace</span><span class="o">=</span><span class="n">accept_inplace</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">on_unused_input</span><span class="o">=</span><span class="n">on_unused_input</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">output_keys</span> <span class="o">=</span> <span class="n">output_keys</span><span class="p">)</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>                       <span class="n">defaults</span><span class="p">)</span>         <span class="c">#     ^^^^ </span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>FunctionMaker:</h3>

<p> <code>FunctionMaker.__init()__</code> is where <code>fgraph</code> is extracted and optimized. <code>FuncitonMaker.create()</code> is where <code>function</code> will be compiled and linked. In fact, <code>FunctionMaker.linker.make_thunk()</code> is where <code>function</code> is linked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">FunctionMaker</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span> <span class="o">...</span><span class="n">args</span><span class="o">...</span> <span class="p">):</span>
</span><span class='line'>        <span class="c"># again, make sure that input/output are tranformed into In and Out</span>
</span><span class='line'>        <span class="n">inputs</span><span class="p">,</span> <span class="n">outputs</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">wrap_in</span><span class="p">,</span> <span class="n">inputs</span><span class="p">),</span> <span class="nb">map</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">wrap_out</span><span class="p">,</span> <span class="n">outputs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># ???</span>
</span><span class='line'>        <span class="n">_inputs</span> <span class="o">=</span> <span class="n">gof</span><span class="o">.</span><span class="n">graph</span><span class="o">.</span><span class="n">inputs</span><span class="p">([</span><span class="n">o</span><span class="o">.</span><span class="n">variable</span> <span class="k">for</span> <span class="n">o</span> <span class="ow">in</span> <span class="n">outputs</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="o">.</span><span class="n">update</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">inputs</span> <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s">&#39;update&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)])</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># make indices ... which is useless</span>
</span><span class='line'>        <span class="n">indices</span> <span class="o">=</span> <span class="p">[[</span><span class="nb">input</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">expand_in</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">_inputs</span><span class="p">)</span> <span class="k">for</span> <span class="nb">input</span> <span class="ow">in</span> <span class="n">inputs</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># get fgraph</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">fgraph</span> <span class="ow">is</span> <span class="n">Node</span><span class="p">:</span>
</span><span class='line'>            <span class="n">fgraph</span><span class="p">,</span> <span class="n">additional_outputs</span> <span class="o">=</span> <span class="n">std_fgraph</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">accept_inplace</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">_</span><span class="p">,</span> <span class="n">additional_outputs</span> <span class="o">=</span> <span class="n">std_fgraph</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">accept_inplace</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">fgraph</span> <span class="o">=</span> <span class="n">fgraph</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># fetch optimizor and linker</span>
</span><span class='line'>        <span class="n">optimizer</span><span class="p">,</span> <span class="n">linker</span> <span class="o">=</span> <span class="n">mode</span><span class="o">.</span><span class="n">optimizer</span><span class="p">,</span> <span class="n">copy</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">mode</span><span class="o">.</span><span class="n">linker</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># optimize fgraph</span>
</span><span class='line'>        <span class="c"># if need_opt:</span>
</span><span class='line'>            <span class="c"># optimization code here</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># linker accept fgraph </span>
</span><span class='line'>        <span class="k">if</span> <span class="n">no_borrow</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">linker</span> <span class="o">=</span> <span class="n">linker</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">fgraph</span><span class="p">,</span> <span class="n">no_recycling</span><span class="o">=</span><span class="n">infer_reuse_pattern</span><span class="p">(</span><span class="n">fgraph</span><span class="p">,</span> <span class="n">no_borrow</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">linker</span> <span class="o">=</span> <span class="n">linker</span><span class="o">.</span><span class="n">accept</span><span class="p">(</span><span class="n">fgraph</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">linker</span><span class="p">,</span> <span class="s">&#39;accept_var_updates&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># hacky thing so VMLinker knows about updates</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">linker</span><span class="o">.</span><span class="n">accept_var_updates</span><span class="p">(</span>
</span><span class='line'>                    <span class="n">fgraph_updated_vars</span><span class="p">(</span><span class="n">fgraph</span><span class="p">,</span> <span class="n">inputs</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># some other configeration here</span>
</span><span class='line'>        <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_storage</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">trustme</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Create a function.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Input storage is the &#39;value&#39; attribute of each In instances</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># construct input_storage_list and default list</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">((</span><span class="nb">input</span><span class="p">,</span> <span class="n">indices</span><span class="p">,</span> <span class="n">subinputs</span><span class="p">),</span> <span class="n">input_storage_i</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">indices</span><span class="p">,</span> <span class="n">input_storage</span><span class="p">)):</span>
</span><span class='line'>            <span class="c"># a lot of codes here.</span>
</span><span class='line'>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Q: What&#39;s indices?</span>
</span><span class='line'><span class="sd">        List of (SymbolicInput, incide, [SymbolicInput..]). The first one is the </span>
</span><span class='line'><span class="sd">        input vaiable; the incide is the index of the input in the input list; </span>
</span><span class='line'><span class="sd">        the [SymIn...] the relevant input(?); </span>
</span><span class='line'><span class="sd">        According to the document, the last two is deprecated. So it can be regarded as list of SymbolicInput.</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">        Q: What&#39;s defaults?</span>
</span><span class='line'><span class="sd">        A: List of 3-tuples. Each tuple corresponds to one input_storage. </span>
</span><span class='line'><span class="sd">        ( </span>
</span><span class='line'><span class="sd">          Bool: Is this input required at each function call?,  </span>
</span><span class='line'><span class="sd">          Bool: Should this inputs value be reverted to default value after each call? </span>
</span><span class='line'><span class="sd">          AnyType: The value(storage) associated with this input.</span>
</span><span class='line'><span class="sd">        )</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># call make_thunk() from linker and get fn</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">theano</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">traceback</span><span class="o">.</span><span class="n">limit</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">_fn</span><span class="p">,</span> <span class="n">_i</span><span class="p">,</span> <span class="n">_o</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">linker</span><span class="o">.</span><span class="n">make_thunk</span><span class="p">(</span><span class="n">input_storage</span><span class="o">=</span><span class="n">input_storage_lists</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># ^   ^   ^ =&gt; (function, input_containers, output_containers)</span>
</span><span class='line'>            <span class="c"># where function is a thunk that operates on the returned variables.</span>
</span><span class='line'>            <span class="c"># Because the map_storag() in make_thunk()</span>
</span><span class='line'>            <span class="c"># from here on, the input/output_storage represent all I/O of all relative nodes</span>
</span><span class='line'>            <span class="c"># ALso, storage is container, Instead of SymbolicKit</span>
</span><span class='line'>        <span class="k">finally</span><span class="p">:</span>
</span><span class='line'>            <span class="n">theano</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">traceback</span><span class="o">.</span><span class="n">limit</span> <span class="o">=</span> <span class="n">limit_orig</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># get a function, here function_builder() is the constructor</span>
</span><span class='line'>        <span class="c"># of class Function.</span>
</span><span class='line'>        <span class="n">fn</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">function_builder</span><span class="p">(</span><span class="n">_fn</span><span class="p">,</span> <span class="n">_i</span><span class="p">,</span> <span class="n">_o</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">indices</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">outputs</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">defaults</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">unpack_single</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">return_none</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_keys</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fn</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>What&rsquo;s <code>theano.function</code>?</h2>

<p>Each function is a callable object.  <code>theano.function</code> is not a python function. Instead, it a class with method <code>__call__()</code>.  Every funciton stores its own fgraph, maker, storages and many other configurations. However, the core of a function is a function <code>fn()</code> returned by <code>linker.make_thunk()</code>. Every time a function is called, it will first verify the input data, and then call <code>self.fn()</code> to get output values.</p>

<hr />

<p>Now I know how is a function borned. Also, I know that to complete my missions, I need to focus more on <code>FunctionMaker</code> and <code>Function</code> rather that <code>orig_func()</code> and <code>pfunc()</code>. However, there still exist some question, such as: What does <code>make_thunk()</code> do? and What is <code>In()</code>, <code>Out()</code> and <code>container</code>? In the next post, I will have a look at this and other relative data structures.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode battlefield:Start Coding With C++]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/30/leetcode-start-coding-with-c-plus-plus/"/>
    <updated>2015-03-30T00:24:06+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/30/leetcode-start-coding-with-c-plus-plus</id>
    <content type="html"><![CDATA[<p>So, the buggy judging system of python is unbearable, therefore I just turned to C++ and expected a better experience. Also, I need to learn  C++ for my future career. So, a good start. This post contains following problems:</p>

<ul>
<li>Reverse words</li>
<li>Eval RPN</li>
<li>Tree Traversal</li>
</ul>


<hr />

<h3>Reverse words</h3>

<p>Before solving this problem I never tried using std::string, I thought string operation in C++ is as hard as C. However, standard library really ease my pains. In fact, with the help of std, I think coding with C++ is much more easier and happier than coding with Ruby and Python now.</p>

<h5>Question:</h5>

<p>Given an input string, reverse the string word by word.</p>

<h5>Basic logic:</h5>

<p>The idea is simple, find each word in the sentence, push then in the stack and pop back after dealing the whole sentence. Be careful to the spaces in the head or tails of the sentence and the repeated spaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">reverseWords</span><span class="p">(</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// get the words in reverse order</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">;</span>
</span><span class='line'>        <span class="n">split</span><span class="p">(</span> <span class="n">s</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">words</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// reconstruct</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span><span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">s</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">s</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// delete last space</span>
</span><span class='line'>        <span class="n">s</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">split</span><span class="p">(</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">v</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">begin</span><span class="p">,</span> <span class="n">last</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// first word</span>
</span><span class='line'>        <span class="n">begin</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span><span class="mi">1</span> <span class="p">;</span>
</span><span class='line'>        <span class="n">last</span>  <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span> <span class="n">c</span><span class="p">,</span> <span class="n">begin</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span> <span class="n">last</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">begin</span><span class="o">-</span><span class="n">last</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span> <span class="n">last</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">begin</span><span class="o">-</span><span class="n">last</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// find next words</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span> <span class="n">last</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="n">and</span> <span class="n">begin</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// find a word </span>
</span><span class='line'>            <span class="n">begin</span> <span class="o">=</span> <span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">last</span>  <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span> <span class="n">c</span><span class="p">,</span> <span class="n">begin</span> <span class="p">);</span>
</span><span class='line'>            <span class="c1">// if it&#39;s repeated split character, skip it</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span> <span class="n">last</span> <span class="o">==</span> <span class="n">begin</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">begin</span> <span class="o">=</span> <span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">last</span>  <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">find_last_of</span><span class="p">(</span> <span class="n">c</span><span class="p">,</span> <span class="n">begin</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// skip if is last space</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span> <span class="n">last</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">begin</span><span class="o">-</span><span class="n">last</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span> <span class="n">last</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">begin</span><span class="o">-</span><span class="n">last</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>evalRPN</h3>

<h5>Question:</h5>

<p>Evaluate the value of an arithmetic expression in Reverse Polish Notation. For example:
    [&ldquo;2&rdquo;, &ldquo;1&rdquo;, &ldquo;+&rdquo;, &ldquo;3&rdquo;, &ldquo;*&rdquo;] -> ((2 + 1) * 3) -> 9</p>

<h5>Basic logic:</h5>

<p>Also simple idea: Iterater through the list, push numbers to a stack. Everytime we meet operaor, pop top 2 numbers and calculate the result, push the result to the stack. Finally, there will be only one number in the stack, which is the reuslt.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='C++'><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">evalRPN</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">tokens</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">resultStack</span><span class="p">;</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">symbol</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">bool</span> <span class="n">isOperator</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">tokens</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">symbol</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="n">isOperator</span> <span class="o">=</span>  <span class="n">symbol</span><span class="o">==</span><span class="s">&quot;+&quot;</span><span class="o">||</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;-&quot;</span><span class="o">||</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;*&quot;</span><span class="o">||</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;/&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="o">!</span> <span class="n">isOperator</span> <span class="p">)</span>
</span><span class='line'>                <span class="n">resultStack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">stoi</span><span class="p">(</span><span class="n">symbol</span><span class="p">));</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">right</span> <span class="o">=</span> <span class="n">resultStack</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'>                <span class="n">resultStack</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>                <span class="n">left</span> <span class="o">=</span> <span class="n">resultStack</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'>                <span class="n">resultStack</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;+&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">symbol</span> <span class="o">==</span><span class="s">&quot;-&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">left</span> <span class="o">-</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;*&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">left</span> <span class="o">*</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">symbol</span><span class="o">==</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">result</span> <span class="o">=</span> <span class="n">left</span> <span class="o">/</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;ERROR&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="n">resultStack</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">resultStack</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Tree traversal</h3>

<h5>Basic logic:</h5>

<p>Basic algo. There are 3 kind of traversal method: postorder, preorder and inorder.</p>

<h5>PostOrder</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">postorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">){</span>
</span><span class='line'>                <span class="n">travel</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>                <span class="n">travel</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">void</span> <span class="n">travel</span><span class="p">(</span> <span class="n">TreeNode</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">v</span> <span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h5>PreOrder</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">preorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">travel</span><span class="p">(</span><span class="n">TreeNode</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">){</span>
</span><span class='line'>        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">v</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span> <span class="p">){</span>
</span><span class='line'>            <span class="n">travel</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode battlefield:Some Python Codes]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/30/leetcode-some-python-codes/"/>
    <updated>2015-03-30T00:22:37+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/30/leetcode-some-python-codes</id>
    <content type="html"><![CDATA[<p>I collected a bunches of leetcode code solutions and now put them in one post. This post contains the following questions:</p>

<pre><code>* BST Iterator
* Factorial Trailing Zeros
* Excel number
* Decimal
* Find Peak Element
* Min stack
* Majority elements
* Trailing zeros
* Tree Travel
</code></pre>

<p>Also, after realing leetcode online judge have numerous bug in python test case, I decided to turn to C++. So, here comes the solutions.</p>

<hr />

<h3>BST Iterator</h3>

<h5>Question:</h5>

<p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.
Calling <code>next()</code> will return the next smallest number in the BST.
Note: <code>next()</code> and <code>hasNext()</code> should run in average <code>O(1)</code> time and uses <code>O(h)</code> memory, where h is the height of the tree.</p>

<h5>Basic logic:</h5>

<p>The smallest value is will be on the left-most node, therefore the first thing to do is to dive to the deepest ad left-most of the tree. Next we can return the value of the middle node, then its left node. A list of nodes on path should be maintain to avoid return repeated value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BSTIterator</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param root, a binary search tree&#39;s root node</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># ancestors of current node, </span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ancestors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># current node, initialized by root</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># current point to the  smallest value</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">root</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">dive</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @return a boolean, whether we have a next smallest number</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hasNext</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">!=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hasLeft</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasNext</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">hasRight</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasNext</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @return an integer, the next smallest number</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># every time we dive first,</span>
</span><span class='line'>        <span class="c"># so the smallest value is the current node</span>
</span><span class='line'>        <span class="n">rval</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">val</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasRight</span><span class="p">():</span>
</span><span class='line'>            <span class="c"># if no right nodes</span>
</span><span class='line'>            <span class="c"># the next smallest value will be current node&#39;s parent</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ancestors</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># if there is right node,  it&#39;s value will smaller than parent&#39;s, </span>
</span><span class='line'>            <span class="c"># so step into it, then dive to left-most</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">dive</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">rval</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">dive</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">hasLeft</span><span class="p">():</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">left</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Excel column number</h3>

<h5>Qusetion</h5>

<p>Given Excel column number, return the corresponding digit number</p>

<h5>Basic logic</h5>

<p>A conversion of number systems( thought not a typical one) . First we map characters to numbers, them multiply digit in the <code>Nth</code> location with <code>26^n</code>, sum and get the result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param s, a string</span>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">map</span> <span class="o">=</span><span class="s">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">titleToNumber</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
</span><span class='line'>        <span class="n">rval</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
</span><span class='line'>            <span class="c"># need to revese the string</span>
</span><span class='line'>            <span class="n">rval</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">char2Int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="mi">26</span><span class="o">**</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">rval</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">char2Int</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">char</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">map</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">char</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Majority element</h3>

<h6>Question:</h6>

<p>Given an array of size n, find the majority element. The majority element is the element that appears more than <code>n/2</code> times.</p>

<h6>Basic logic:</h6>

<p>Use a counter(map) to calculate how many times each elements has occured and return if <code>times &gt; length/2</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param num, a list of integers</span>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">majorityElement</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">map</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="n">length</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">num</span><span class="p">:</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="nb">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">except</span><span class="p">:</span>
</span><span class='line'>                <span class="nb">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">map</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">length</span><span class="o">/</span><span class="mi">2</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Trailing zeros.</h3>

<h5>Question:</h5>

<p>Given an integer n, return the number of trailing zeroes in n!.</p>

<h5>Basic logics:</h5>

<p>This is more a math problem than a code problem. Notice that <code>1 x 2 x 3 ... x 5 ... x 10 ...</code> with every <code>5</code>( or <code>n x 5</code> ) there must be a <code>2</code>(or<code>nx2</code>). And the trailing zeros must be the result of <code>(2x5)^n</code>. Therefore, the problem becomes &lsquo;How many 5 are there in it&rsquo;s factors&rsquo;. ( Need to rewrite this paragraph )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">trailingZeroes</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="mi">5</span><span class="o">**</span><span class="n">k</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>            <span class="n">num</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="mi">5</span><span class="o">**</span><span class="n">k</span><span class="p">))</span>
</span><span class='line'>            <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<hr />

<h3>Find peak elements</h3>

<h6>Questions</h6>

<p>Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.</p>

<h6>Basic logic</h6>

<p>Easy problem, just iter over and compare each element with its neighbours. If the num[i] can equals num[i+], we first deduplicate, and then compare. Need some attentions on the conner case( length = 0,1 or the peak occurs on the head or tails)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param num, a list of integer</span>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findMin</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># deduplicate</span>
</span><span class='line'>            <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">num</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">num</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)):</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">num</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                        <span class="n">num</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">findMinNoRepeat</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findMinNoRepeat</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">min</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">num</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">buf</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>                <span class="n">buf</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isMax</span><span class="p">(</span><span class="n">buf</span><span class="p">):</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="n">index</span> <span class="o">%=</span> <span class="n">length</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">!=</span> <span class="n">buf</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>                        <span class="n">buf</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">buf</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">isMax</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buf</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span> <span class="n">buf</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&gt;</span><span class="n">buf</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Min Stack</h3>

<h5>question</h5>

<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>

<pre><code>* push(x) -- Push element x onto stack.
* pop() -- Removes the element on top of the stack.
* top() -- Get the top element.
* getMin() -- Retrieve the minimum element in the stack.
</code></pre>

<h5>Basic logic</h5>

<p>The key is to maintain double stack: one for normal push() and pop(), the other for the operation getMin(). When a new min value is pushed, we also push it to the min_stack, when it pops, we also pop it from min_stack. So the minimum value is always on the top of min_stack.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MinStack</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @param x, an integer</span>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span> <span class="o">==</span> <span class="p">[]</span> <span class="ow">or</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @return nothing</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">val</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @return an integer</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">getMin</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">minStack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>Fraction to Recurring Decimal</h3>

<h5>Question</h5>

<h5>Basic logics.</h5>

<p>Easy job, just a little bit tedious. By implementing a long divide, we can easily find the answer. Remember to store every ( quotient，remainder )pairs so that we can know when it starts repeat itself. The python test case is wrong. See <a href="https://leetcode.com/discuss/28804/result-of-test-case-1-214748364-should-be-repeating-decimal">this post</a>. After this solution, I turned to C++, which should have better judge system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="c"># @return a string</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fractionToDecimal</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numerator</span><span class="p">,</span> <span class="n">denominator</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># corner case</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">numerator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&#39;0&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># if no decimal number</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">numerator</span> <span class="o">%</span> <span class="n">denominator</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">str</span><span class="p">(</span> <span class="n">numerator</span><span class="o">/</span><span class="n">denominator</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># reduction of a fraction, not necessary</span>
</span><span class='line'>            <span class="n">fraction</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="k">while</span> <span class="n">fraction</span> <span class="o">&lt;=</span> <span class="nb">min</span><span class="p">(</span> <span class="nb">abs</span><span class="p">(</span><span class="n">numerator</span><span class="p">),</span> <span class="nb">abs</span><span class="p">(</span><span class="n">denominator</span><span class="p">)</span> <span class="p">):</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">numerator</span> <span class="o">%</span> <span class="n">fraction</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">denominator</span> <span class="o">%</span> <span class="n">fraction</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">numerator</span> <span class="o">/=</span> <span class="n">fraction</span>
</span><span class='line'>                        <span class="n">denominator</span> <span class="o">/=</span> <span class="n">fraction</span>
</span><span class='line'>                        <span class="k">break</span>
</span><span class='line'>                    <span class="n">fraction</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>                <span class="c"># if it&#39;s end, end it. else ,restart again</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">fraction</span> <span class="o">&gt;=</span> <span class="nb">min</span><span class="p">(</span> <span class="nb">abs</span><span class="p">(</span><span class="n">numerator</span><span class="p">),</span> <span class="nb">abs</span><span class="p">(</span><span class="n">denominator</span><span class="p">)</span> <span class="p">):</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="n">fraction</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Decomposition quality factor to find if demimal repeated itself, not necessary.</span>
</span><span class='line'>            <span class="n">denom</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">denom</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">denom</span> <span class="o">/=</span> <span class="mi">2</span>
</span><span class='line'>            <span class="k">while</span> <span class="n">denom</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">denom</span> <span class="o">/=</span><span class="mi">5</span>
</span><span class='line'>            <span class="n">repeated</span> <span class="o">=</span> <span class="n">denom</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">result_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>            <span class="c"># get the symbol of final result</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">numerator</span><span class="o">*</span><span class="n">denominator</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result_list</span> <span class="o">+=</span> <span class="p">[(</span><span class="s">&#39;-&#39;</span><span class="p">,</span><span class="s">&#39;-&#39;</span><span class="p">)]</span>
</span><span class='line'>            <span class="n">numerator</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">numerator</span><span class="p">)</span>
</span><span class='line'>            <span class="n">denominator</span> <span class="o">=</span> <span class="nb">abs</span> <span class="p">(</span><span class="n">denominator</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># start long divide loop( core algo )</span>
</span><span class='line'>            <span class="n">add_dot</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># long divide</span>
</span><span class='line'>                <span class="n">quotient</span> <span class="o">=</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span>
</span><span class='line'>                <span class="n">remainder</span> <span class="o">=</span> <span class="n">numerator</span> <span class="o">%</span> <span class="n">denominator</span>
</span><span class='line'>                <span class="n">numerator</span> <span class="o">=</span> <span class="n">remainder</span>
</span><span class='line'>
</span><span class='line'>                <span class="c"># check if repreated, if not, ready for the next division</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">remainder</span><span class="p">,</span> <span class="n">quotient</span><span class="p">)</span> <span class="ow">in</span> <span class="n">result_list</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">repreat_start_locaation</span> <span class="o">=</span> <span class="n">result_list</span><span class="o">.</span><span class="n">index</span><span class="p">((</span><span class="n">remainder</span><span class="p">,</span> <span class="n">quotient</span><span class="p">))</span>
</span><span class='line'>                    <span class="n">result_list</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span> <span class="n">repreat_start_locaation</span><span class="p">,</span> <span class="p">(</span> <span class="s">&#39;(&#39;</span><span class="p">,</span> <span class="s">&#39;(&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                    <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="p">(</span> <span class="s">&#39;)&#39;</span> <span class="p">,</span> <span class="s">&#39;)&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>                <span class="c"># append this result of division</span>
</span><span class='line'>                <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="p">(</span><span class="n">remainder</span><span class="p">,</span> <span class="n">quotient</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                <span class="c"># if remainder is 0, it&#39;s not a repreated number                    </span>
</span><span class='line'>                <span class="k">if</span> <span class="n">remainder</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">add_dot</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">result_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">,</span><span class="s">&#39;.&#39;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>                    <span class="n">add_dot</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                <span class="n">numerator</span> <span class="o">*=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="c"># construck result</span>
</span><span class='line'>            <span class="n">result_list</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
</span><span class='line'>            <span class="n">result_str</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>            <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">result_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">remainder</span><span class="p">,</span> <span class="n">quotient</span> <span class="o">=</span> <span class="n">result_list</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'>                <span class="n">result_str</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">quotient</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result_str</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC2015_blog_test]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/27/gsoc2015-blog-test/"/>
    <updated>2015-03-27T12:52:17+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/27/gsoc2015-blog-test</id>
    <content type="html"><![CDATA[<p>Just a post to test if catagory and rss feed works well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode Battlefield: largestNum (and TDD?)]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/12/largest-number-and-tdd/"/>
    <updated>2015-03-12T17:38:50+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/12/largest-number-and-tdd</id>
    <content type="html"><![CDATA[<p>Today I solve another problem on leetcode, the process of solving this issue just like the old saying: “踏破铁鞋无觅处，得来全不费功夫”, which means people spared a lot of efforts on a problem but it was solved in a unexpected simple way.</p>

<p>Ok, let&rsquo;s talk about the problem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Given a list of non negative integers, arrange them such that they form the largest number.
</span><span class='line'>  
</span><span class='line'>  For example, given [3, 30, 34, 5, 9], the largest formed number is 9534330.
</span><span class='line'>  
</span><span class='line'>  Note: The result may be very large, so you need to return a string instead of an integer.</span></code></pre></td></tr></table></div></figure>


<p>So the first thing I need to do is transfer integers into strings, which will help in the following comparasion. Next, I sorted the numbers based on their first digits because obsiviousl, <code>9**</code> is greater than <code>1**</code>. Aftr that, I extracted numbers with same first digits and do the comparation.</p>

<p>In the comparation, those numbers will be combine to form the biggest number they can. This is the most important part. At first, I wrote a complicated algorithm which did comparasion using  <code>a[:length] &gt; b[:length]</code>, and lots of code handle conner case &ndash; one of the number is longger. The code went really long like</p>

<p>This code went well expect for the test cases like <code>[8308, 830]</code> or <code>[101,10]</code>: No matter how I compared thoes numbers, they are &lsquo;equal&rsquo;. But when I combined them with different order, the result differed. I spent a long time trying to figure<code>(playing)</code> a<code>(3ds)</code> method<code>(game)</code>. Suddenly, I came out with a idea: &ldquo;why not do the comparision by combine digits in different order and see which result is larger?&rdquo;. It Works, and the final algorithm became really simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @param num, a list of integers</span>
</span><span class='line'>    <span class="c"># @return a string</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">largestNumber</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">num</span> <span class="p">]</span>
</span><span class='line'>        <span class="c"># sort by the first digit </span>
</span><span class='line'>        <span class="n">sorted_num</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">reverse</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># for number with same &#39;first number&#39;, combine them to get biggest</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="n">num_group</span> <span class="o">=</span> <span class="p">[</span> <span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">sorted_num</span> <span class="k">if</span> <span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">num_group</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">result</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">maxNum</span><span class="p">(</span> <span class="n">num_group</span> <span class="p">)</span>
</span><span class='line'>        <span class="c"># check if number is zero</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">maxNum</span><span class="p">(</span> <span class="bp">self</span><span class="p">,</span> <span class="n">nums</span> <span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Given numbers(list of string) with same first digits, </span>
</span><span class='line'><span class="sd">        combine them to get max number(string).</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'>        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># init a winner and its index</span>
</span><span class='line'>            <span class="n">win</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="n">win_index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="n">win_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">win</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># find a num, if added to result, yield biggest number</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">num</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>                <span class="n">result1</span> <span class="o">=</span> <span class="n">win</span> <span class="o">+</span> <span class="n">num</span>
</span><span class='line'>                <span class="n">result2</span> <span class="o">=</span> <span class="n">num</span> <span class="o">+</span> <span class="n">win</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">result1</span><span class="o">&gt;</span><span class="n">result2</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">num_win</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">num_win</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="n">num_win</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">win</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'>                    <span class="n">win_index</span> <span class="o">=</span> <span class="n">index</span>
</span><span class='line'>                    <span class="n">win_length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># append the winner to the result</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">win_index</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># append the last number</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>About TDD:</h3>

<p>In Last day&rsquo;s interview, I was asked about my idea of TDD(Test Drive Development), I just answered:&ldquo;I think it is usual, I wrote test for my codes.&rdquo;, which equals to answered nothing. These two days I developed leetcode&rsquo;s answer with the help of OnlineJudge&rsquo;s test cases, I did realise that writing test cases norishes a developer.</p>

<p>Every time programmers write tests，they try covering every special cases they know， therefore codes pass their own tests are their best products within their ability. But when things come to production, codes will prossibly encouter cases that make it fail, which, just like a hole in developer&rsquo;s mind. Every time developer find such a case, it find a hole in his mind he never knows, then he fixes it. Day after dats, after millions of holes are fix, his mind hardly has hole. Therefore, his products, his codes, will become unbelievably stable.</p>

<p>That&rsquo;s my understand of TDD &ndash; Test Drive Developer.</p>

<p>Just for fun, don&rsquo;t take it seriously. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode Battle Field and 面试小日记]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/11/day2015-dot-3-10/"/>
    <updated>2015-03-11T21:23:03+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/11/day2015-dot-3-10</id>
    <content type="html"><![CDATA[<p>今天去个创业公司面试了，总体来说不是很满意。一方面是在面谈的时候没能够控制好自己的情绪，让对方不断说“没关系，这个不是说你上班……”什么的。其实我应该要控制好自己的情绪，然后想想怎么表达自己的想法，说服别人。这方面我一直做不好。另一个问题是笔试的时候再次把自己鄙视了 －－ 题目都不会(=T_T=)。</p>

<p>也算加深了一点职场上对程序员的要求的了解。一个是技术方面，首先要基础好：理论懂得各种名词基本理论，比如搞互联网通信就知道HTTP和socket是怎么回事，写后台就要回thread和process；另外技能熟练，常用的包的常用概念和API要熟悉。这个决定了程序员能不能用。如果不能用，但是长期留，就可以看看他聪不聪明，聪明慢慢学。如果短期留，最好基础和技能都扎实，直接形成生产力。这里两方面我都没做好：知识不扎实又不能长期留。所以技术上跪。</p>

<p>另一个是做人方面：程序员的价值观最好跟自己团队相近，一起工作才能有化学反应。人与人之间的愉快交流会促进交流和学习，这样大家才能一块成长和迸发新想法，而不是说简单的完成任务，每天原地踏步，死水一潭。今天跟Boss交流，我很不理解的一个方面就是：明明编程语言和包／库是工具，他们具有不同特性，然后程序员应该根据不同需求使用不同语言／包。但是他却根据人的特性，然后给人贴上不同语言的label：&#8221;我觉得你更适合python社区“ 这个我一听，心想“怎么能这样呢？搞反了啊。”,然后就激动了，然后就失控了。估计他也聊得不开心。总的来说，双方都没反应，二跪。</p>

<p>反正今天就是跪了一下午，上来发发泄。不过后期的学习计划也明确了下:</p>

<ul>
<li>如果准备去互联公司工作，首先互联网通信协议和计算机网络要精通（基本功好），然后相关包要API要熟悉（技能足），上来就是战斗力（劳动力）。总的来说不要求基础好，但要要求API熟记。</li>
<li>如果准备大公司保养，一个劲儿算法学好。大公司有钱，不着急形成战斗力，可以慢慢培养人才。算法基础好，往哪里转都合适。但是因为大公司一般都没有现成包可以使用，一切自己开发，所以对算法要求很高。总的来说不要求工具玩得出神入化，但是基础好。</li>
</ul>


<hr />

<h3>LeetCode Battle Field:</h3>

<p>好吧，回来说下这今天在做的一道leetcode。以后leetcode和hackerrank相关刷题blog都有这个<code>leetcode battle field</code>的flag。</p>

<p>先看题目:</p>

<p>  Say you have an array for which the ith element is the price of a given stock on day i.Design an algorithm to find the maximum profit. You may complete at most k transactions.</p>

<p>基本题目意思是，给定一个股价序列<code>prices</code>和可操作（一买一卖）次数<code>k</code>，求最大利益。</p>

<p>这道题目也是做了两个思路。首先最基本的是，股票必定低买高卖，因此先求极点。这个是没问题的。
第一个思路是，股票一买一卖一个周期，把所有周期求出来，然后sort一下，取前<code>k</code>个周期求和就是最大利益。这个版本的代码没留着，因为缺陷很明显：如果股票小幅下跌后大幅上涨，我们就不赢该再下跌的时候把股票卖了，这样会浪费操作次数，导致利润降低。</p>

<p>意识到这一点之后，这个题目变的很难。因为要有全局眼光。首先为股票写一个类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">Stock</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buy_date</span><span class="p">,</span> <span class="n">buy_price</span><span class="p">,</span> <span class="n">sale_date</span><span class="p">,</span> <span class="n">sale_price</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">buy_price</span> <span class="o">=</span> <span class="n">buy_price</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">buy_date</span> <span class="o">=</span> <span class="n">buy_date</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sale_price</span> <span class="o">=</span> <span class="n">sale_price</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sale_date</span> <span class="o">=</span> <span class="n">sale_date</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">profit</span> <span class="o">=</span> <span class="n">sale_price</span> <span class="o">-</span> <span class="n">buy_price</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span>  <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span>  <span class="nb">str</span><span class="p">({</span>
</span><span class='line'>        <span class="s">&#39;buy_price&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">buy_price</span> <span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;buy_date&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">buy_date</span> <span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sale_price&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">sale_price</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;sale_date&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">sale_date</span> <span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;profit&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">profit</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个class代表了一直股票的所有关键参数：买卖时间和买卖价格，然后计算出利润。然后这个问题转化成两个：</p>

<ol>
<li>求取所有可能拥有的股票（所有可能买卖组合）</li>
<li>这些组合在能够实现，操作次数满足条件的情况下的最大利润。</li>
</ol>


<p> 1 很简单，求所有极值点然后排列组合就好。2 的话，主要满足一个需求股票必须全卖之后才能全买，不能说连着买两次。简单地说就是买卖区间不能重叠。一开始考虑写成一个树，结点是一个股票，他的子结点是买了那只股票之后剩下的其他可能的股票。然后求取<code>depth＝k</code>的所有路径上的利润。但是这个方法很难实现，而且空间复杂度高。后来仔细一想其实这个就是个小递归（动态规划？）。这个问题就变成了：</p>

<ol>
<li>假设<code>N手</code>获得最大利益</li>
<li>那么第一手的利益和剩下的<code>N-1手</code>的利益相加必定是最大的</li>
<li>求取所有可能的第一手，与对应<code>N－1手</code>的最大利益，相加，看看那个利润最大</li>
<li>对<code>N-1手</code>采用 1 直到省下一次操作次数，这时可以直接在所有选择中求max</li>
</ol>


<p>跟着这个做出了这个算法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># @return an integer as the maximum profit </span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">have</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">profits</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">possibleStocks</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">prices</span><span class="p">):</span>
</span><span class='line'>      <span class="sd">&quot;&quot;&quot;get all possible stocks</span>
</span><span class='line'><span class="sd">      &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># get all possible operate point</span>
</span><span class='line'>        <span class="n">buy_points</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="n">sale_points</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="c"># conner case</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">prices</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">buy_points</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">prices</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>            <span class="n">sale_points</span> <span class="o">+=</span> <span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># general case</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">date</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="p">]</span> <span class="ow">and</span>\
</span><span class='line'>                <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">sale_points</span> <span class="o">+=</span> <span class="p">[</span> <span class="n">date</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="p">]</span> <span class="ow">and</span>\
</span><span class='line'>                <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">prices</span><span class="p">[</span><span class="n">date</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">buy_points</span> <span class="o">+=</span> <span class="p">[</span> <span class="n">date</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="c"># get all possible stock</span>
</span><span class='line'>        <span class="n">stocks</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">buy_point</span> <span class="ow">in</span> <span class="n">buy_points</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">sale_point</span> <span class="ow">in</span> <span class="n">sale_points</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">buy_point</span> <span class="o">&gt;</span> <span class="n">sale_point</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">break</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">b_d</span> <span class="o">=</span> <span class="n">buy_point</span>
</span><span class='line'>                    <span class="n">s_d</span> <span class="o">=</span> <span class="n">sale_point</span>
</span><span class='line'>                    <span class="n">b_p</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">buy_point</span><span class="p">]</span>
</span><span class='line'>                    <span class="n">s_p</span> <span class="o">=</span> <span class="n">prices</span><span class="p">[</span><span class="n">sale_point</span><span class="p">]</span>
</span><span class='line'>                    <span class="c"># stocks should earn money</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">s_p</span> <span class="o">&gt;</span> <span class="n">b_p</span><span class="p">:</span>
</span><span class='line'>                        <span class="n">stocks</span> <span class="o">+=</span> <span class="p">[</span> <span class="n">Stock</span><span class="p">(</span><span class="n">b_d</span><span class="p">,</span> <span class="n">b_p</span><span class="p">,</span> <span class="n">s_d</span><span class="p">,</span> <span class="n">s_p</span><span class="p">)</span> <span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stocks</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">findMaxProfit</span><span class="p">(</span> <span class="bp">self</span><span class="p">,</span> <span class="n">operation</span><span class="p">,</span> <span class="n">stocks</span><span class="p">,</span> <span class="n">earliest_time</span> <span class="p">):</span>
</span><span class='line'>      <span class="sd">&quot;&quot;&quot;  </span>
</span><span class='line'><span class="sd">      Given possible stocks, operation tims and earliest </span>
</span><span class='line'><span class="sd">      operating time, get max profits</span>
</span><span class='line'><span class="sd">      &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># remain stocks could not be bought before last stock saled</span>
</span><span class='line'>        <span class="n">stocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">stock</span> <span class="k">for</span> <span class="n">stock</span> <span class="ow">in</span> <span class="n">stocks</span> <span class="k">if</span> <span class="n">stock</span><span class="o">.</span><span class="n">buy_date</span> <span class="o">&gt;=</span> <span class="n">earliest_time</span> <span class="p">]</span>
</span><span class='line'>        <span class="c"># if no stock fulfill reuqirement reutrn0</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">stocks</span> <span class="o">==</span> <span class="p">[]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">operation</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="c"># if only 1 operation left, choose max profit</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">max</span><span class="p">([</span> <span class="n">stock</span><span class="o">.</span><span class="n">profit</span> <span class="k">for</span> <span class="n">stock</span> <span class="ow">in</span> <span class="n">stocks</span> <span class="p">])</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span> <span class="c"># 找出 N－1手 和 第N手 的最大利益</span>
</span><span class='line'>            <span class="n">operation</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">possible_profits</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">stocks</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">left_stocks</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">stocks</span><span class="p">)</span>
</span><span class='line'>                <span class="n">left_stocks</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>                <span class="n">possible_profits</span> <span class="o">+=</span> \
</span><span class='line'>                    <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">findMaxProfit</span><span class="p">(</span><span class="n">operation</span><span class="p">,</span> <span class="n">left_stocks</span><span class="p">,</span> <span class="n">stocks</span><span class="p">[</span><span class="n">index</span><span class="p">]</span><span class="o">.</span><span class="n">sale_date</span><span class="p">)</span> <span class="o">+</span> <span class="n">stock</span><span class="o">.</span><span class="n">profit</span><span class="p">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span> <span class="n">possible_profits</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">maxProfit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">prices</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">prices</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">max</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="n">prices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">prices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">stocks</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">possibleStocks</span><span class="p">(</span> <span class="n">k</span><span class="p">,</span> <span class="n">prices</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">findMaxProfit</span><span class="p">(</span> <span class="n">k</span><span class="p">,</span> <span class="n">stocks</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个算法花了很多时间调conner case，结果是没问题的，但是超时。之前用到<code>List.index()</code>方法，真心慢，没看源码，估计不少Python，丢弃了，依旧超时。目前不知道改进方法。后来认真想想，这个应该用动态规划？回去翻翻书.也可能是中间多了一个<code>Stock（）</code>，应该直接根据<code>buy()</code>和<code>sale()</code>写算法会更快。先刷后面的题目。这个POST把这个题目mark下有空慢慢想。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学还是不学？这是一个问题.]]></title>
    <link href="http://chienlima.github.io/blog/2015/03/06/learn-or-not/"/>
    <updated>2015-03-06T18:43:00+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/03/06/learn-or-not</id>
    <content type="html"><![CDATA[<p>最近一直在纠结一个问题：我手上有一本《操作系统原理》，看？还是不看？</p>

<p>请原谅我这个选择困难症患者在这个无聊的问题上纠结这么久。我为此特地在知乎上搜索了将尽一个小时。他人的观点基本你可以总结成两类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 学！程序员三大浪漫之一，好好打地基，万丈高楼平地起。不仅学，习题好好做。
</span><span class='line'>2. 随意！前端要用操作系统原理吗？写ajax要你自己实现TCP/IP?用得着就学。用不着别管。</span></code></pre></td></tr></table></div></figure>


<p>按照这里面的思路去回答问题，估计在纠结两百年也纠结不出来：谁知道知识在什么时候用到？未知的世界永远未知。但是在方向不明确，或者去完全没需求和收益的情况下，去实现编译器或者操作系统什么的……抱歉，太浪漫的事情我做不了。So，为了走出这两个极端，我回答了自己几个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.我浪漫过吗？
</span><span class='line'>  浪漫过
</span><span class='line'>2.有用吗？
</span><span class='line'>  有
</span><span class='line'>3.那么学不学？
</span><span class='line'>  学</span></code></pre></td></tr></table></div></figure>


<p>是的，我也曾经浪漫。在课余时间的时候抱着一本《编译原理》在啃，幻想着把习题做完之后成为编程高手。当然我这种渣渣最后还是屈服在了懒惰之下，书只看了前几章就丢在了一边，自己写编译器什么的更是天方夜谭。</p>

<p>即便如此，这段经历带给我的好处也是十分明显的。这个好处体现在，在面对些语言的trick（语法糖）的时候，我能够很快地理解并且掌握。比如之前在看《ruby元编程》，前半部分我就毫无压力，全当是在复习《编译原理》。原因很简单，因为我在《编译原理》中理解了block和变量作用范围的概念，ruby里面再怎么变化，也逃不出编译器（解释器）的范围。</p>

<p>这个书啊，并不是说看完了他能给你提供什么技能，能够帮助招工赚钱，尤其是基础类别的书。它能提供的，更多是一种概念。越是基础的知识，其中的概念就越抽象，也越能代表更多的事物。很多的概念、名词，其实都是新瓶装旧酒。这酒没变，瓶子其实不怎么重要。</p>

<p>概念是个很重要的东西，很多时候缺少一个概念就会使人停滞不前。因为你意识不到自己的缺陷，也无法找到改进的方法。比如之前在看Scrapy的源代码的时候，对signal和callback函数很难理解。查了很多相关库的API文档，懂得了函数的用法，却衍生出了更多不懂的概念，使自己更加迷糊。这说白了，就是对操作系统的工作机理缺乏理解。这就体现了《操作系统》这本书所能给我带来的优势。</p>

<p>其实不仅是书，视频、经历、人等各种能够为我们带来新概念和新事物的东西，都要勇于接受。一堵墙，打破一个点，就有机会窥见另一面的整个世界。</p>

<p>那么……</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.学不学？
</span><span class='line'>  学！
</span><span class='line'>2.为什么学？学到什么程度？
</span><span class='line'>  了解和掌握操作系统的基本概念和运行机制。
</span><span class='line'>3.怎么学？习题你还做不做？
</span><span class='line'>  就当看科普书，记住概念。习题做小题，目的是帮助巩固概念。
</span><span class='line'>4.你还写不写操作系统了？
</span><span class='line'>  写！个！屁！给钱我就写。</span></code></pre></td></tr></table></div></figure>


<p>好，那么现在剩下的问题就只有一个了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>怎么啃掉这几百页的英文大部头？</span></code></pre></td></tr></table></div></figure>


<p>呵呵，SB ，买英文书 (= =||凸</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have a Try on Octopress]]></title>
    <link href="http://chienlima.github.io/blog/2015/01/16/have-a-try-on-octopress/"/>
    <updated>2015-01-16T23:20:53+08:00</updated>
    <id>http://chienlima.github.io/blog/2015/01/16/have-a-try-on-octopress</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve always want a English technical blog. i&rsquo;ve tried wordpress, which is far from satisfying to inserting code.</p>

<p>Now, I have a try on octopress. Hope it work well~</p>
]]></content>
  </entry>
  
</feed>
